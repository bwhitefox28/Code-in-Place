"""
Bug Invaders - A Code in Place version of the classic Space Invaders
"""


import tkinter
import time
import random
import math
import numpy as np
import matplotlib.pyplot as plt

CANVAS_WIDTH = 500      # Width of drawing canvas in pixels
CANVAS_HEIGHT = 600     # Height of drawing canvas in pixels
CHANGE_X_START = 10
BEEPER_SIZE = 20
KAREL_SIZE = 30
BUG_SIZE = 30
KAREL_Y = CANVAS_HEIGHT - KAREL_SIZE

def main():
    canvas = make_canvas(CANVAS_WIDTH, CANVAS_HEIGHT, 'Bug Invaders')
    KAREL = canvas.create_rectangle(CANVAS_WIDTH/2 - KAREL_SIZE/2, KAREL_Y, CANVAS_WIDTH/2 + KAREL_SIZE/2, CANVAS_HEIGHT, fill='blue', outline='blue')
    BUG = canvas.create_rectangle(CANVAS_WIDTH/2,0,CANVAS_WIDTH/2 + BUG_SIZE,BUG_SIZE, fill = "red", outline = "red")
    BEEPER = canvas.create_rectangle(CANVAS_WIDTH+10, CANVAS_HEIGHT+10, CANVAS_WIDTH+10+BEEPER_SIZE, CANVAS_HEIGHT+10+BEEPER_SIZE, fill = "blue", outline = "blue")
    canvas.bind("<Button-1>", lambda event: mouse_left_click(event, canvas, KAREL, BEEPER))
    bugdx = 6
    bugdy = 0
    while True:

        # Karel tracks the x location of the mouse
        mouse_x = canvas.winfo_pointerx()
        canvas.moveto(KAREL, mouse_x, KAREL_Y)

        canvas.move(BUG, bugdx, bugdy)
        if bug_hits_right_wall(canvas, BUG):
            bug_coord = canvas.coords(BUG)
            bounce_past_frame = bug_coord[2] - CANVAS_WIDTH
            print(bounce_past_frame)
            print(bug_coord)
            canvas.moveto(BUG, bug_coord[0] - bounce_past_frame, bug_coord[1] + 10)
            bugdx *= -1

        if bug_hits_left_wall(canvas, BUG):
            bug_coord = canvas.coords(BUG)
            bounce_past_frame = bug_coord[0] - 0
            print(bounce_past_frame)
            print(bug_coord)
            canvas.moveto(BUG, bug_coord[0] + bounce_past_frame, bug_coord[1] + 10)
            bugdx *= -1

        #When the mouse left click is pressed, beeper is moved in front of KAREL at y-coordinate 532 + beeper's size, the beeper in this position moves up as a projectile
        beeper_coord = canvas.coords(BEEPER)
        if beeper_coord[1] <= 532+BEEPER_SIZE:
            canvas.move(BEEPER, 0, -5)

        if beeper_hit_bugs(canvas,BUG):
            canvas.moveto(BUG, -1 - BUG_SIZE, -1 - BUG_SIZE)
            canvas.moveto(BEEPER, CANVAS_WIDTH+1, CANVAS_HEIGHT+1)

        canvas.update()
        time.sleep(1/50)

def bug_hits_right_wall(canvas, BUG):
    bug_coord = canvas.coords(BUG)
    return bug_coord[2] >= CANVAS_WIDTH and bug_coord[2] < CANVAS_WIDTH + 100
def bug_hits_left_wall(canvas, BUG):
    bug_coord = canvas.coords(BUG)
    return bug_coord[0] <= 0 and bug_coord[0] > -100

def beeper_hit_bugs(canvas, BUG):
    bug_coord = canvas.coords(BUG)
    x1bug = bug_coord[0]
    y1bug = bug_coord[1]
    x2bug = bug_coord[2]
    y2bug = bug_coord[3]
    result = canvas.find_overlapping(x1bug,y1bug,x2bug,y2bug)
    return len(result) > 1

def mouse_left_click(event, canvas, KAREL, BEEPER):
    karel_coord = canvas.coords(KAREL)
    x1 = karel_coord[0]
    y1 = karel_coord[1]
    canvas.moveto(BEEPER,x1, y1 - BEEPER_SIZE)





######## DO NOT MODIFY ANY CODE BELOW THIS LINE ###########

# This function is provided to you and should not be modified.
# It creates a window that contains a drawing canvas that you
# will use to make your drawings.
def make_canvas(width, height, title):
    """
    DO NOT MODIFY
    Creates and returns a drawing canvas
    of the given int size with a blue border,
    ready for drawing.
    """
    top = tkinter.Tk()
    top.minsize(width=width, height=height)
    top.title(title)
    canvas = tkinter.Canvas(top, width=width + 1, height=height + 1)
    canvas.pack()
    return canvas




if __name__ == '__main__':
    main()
#left_clicker = canvas.bind("<Button-1>", lambda event: mouse_left_click(event))
        #if LEFT_CLICKER == 1:
            #canvas.move(beeper)
            #karel_coord = canvas.coords(KAREL)
            #x1 = karel_coord[0]
            #y1 = karel_coord[1]
            #canvas.create_rectangle(x1, y1 - BEEPER_SIZE, x1 + BEEPER_SIZE, y1, fill="blue")
#This does not work. canvas.bind("<Button-1>", mouse_left_click)
